import("//build/build_args.gni")
import("//build/config/compiler.gni")

assert(is_win)

declare_args() {
  # Specify minimum WINNT version for this program to run on
  # No that is not a typo. The number has to have a zero
  # for some strange reason. For the same reason, if you
  # wanted to set the minimum to Windows 7 instead of XP
  # you would use ,6.01 instead of ,6.1 which is the real
  # NT version number
  subsystem_version_suffix = "5.01"

  # Specify WINNT version
  #
  # _WIN32_WINNT/_WIN64_WINNT version constants
  #
  # _WIN32_WINNT_NT4           0x0400 // Windows NT 4.0
  # _WIN32_WINNT_WIN2K         0x0500 // Windows 2000
  # _WIN32_WINNT_WINXP         0x0501 // Windows XP
  # _WIN32_WINNT_WS03          0x0502 // Windows Server 2003
  # _WIN32_WINNT_WIN6          0x0600 // Windows Vista
  # _WIN32_WINNT_VISTA         0x0600 // Windows Vista
  # _WIN32_WINNT_WS08          0x0600 // Windows Server 2008
  # _WIN32_WINNT_LONGHORN      0x0600 // Windows Vista
  # _WIN32_WINNT_WIN7          0x0601 // Windows 7
  # _WIN32_WINNT_WIN8          0x0602 // Windows 8
  # _WIN32_WINNT_WINBLUE       0x0603 // Windows 8.1
  # _WIN32_WINNT_WINTHRESHOLD  0x0A00 // Windows 10
  # _WIN32_WINNT_WIN10         0x0A00 // Windows 10
  #
  win32_min_ver = "0x0501" # _WIN32_WINNT_WINXP
  win64_min_ver = "0x0502" # _WIN32_WINNT_WS03s
}

declare_args() {
  # Minimum version of Internet Explorer (for commctrl.h/ComCtl32.dll) to depend on
  win32_ie_min_ver = ""
}

config("win32") {
  defines = [
    # "_SECURE_ATL", # Can be removed if causes issues
    "PSAPI_VERSION=1", # Set to 2 if you don't need to support < Win7
    "UNICODE", # Always assume Unicode for wide character support
    "_UNICODE",
    "WINVER=$win32_min_ver",
    "_WIN32_WINNT=$win32_min_ver",
    "_WIN64_WINNT=$win64_min_ver",
  ]
  if (win32_min_ver == "0x0400" || win32_min_ver == "0x0500") {
    win32_ie_min_ver = "0x0500"
  } else if (win32_min_ver == "0x0501" || _WIN64_WINNT == "0x0502") {
    win32_ie_min_ver = "0x0600"
  } else if (win32_min_ver == "0x0600" || _WIN64_WINNT == "0x0600") {
    win32_ie_min_ver = "0x0700"
  } else if (win32_min_ver == "0x0601" || _WIN64_WINNT == "0x0601") {
    win32_ie_min_ver = "0x0800"
  } else {
    win32_ie_min_ver = "0x0A00"
  }
  defines += [ "_WIN32_IE=$win32_ie_min_ver, ]

  cflags_cc = [
    "/std:c++17",
    "/Zc:__cplusplus",
  ]

  if (is_debug) {
    cflags = [
      "/Od",  # Disable optimization.
      "/Ob0", # Disable all inlining (on by default).
      "/GF",  # Enable string pooling (off by default).
      "/Z7",  # Debug information in the .obj files.
      "/Zi",  # Produce PDB file, no edit and continue.
    ]
    if (target_cpu == "arm64") {
      cflags += [ "/Oy-", ] # Disable omitting frame pointers, must be after /Ox.
    }
    ldflags += [
      "/OPT:NOREF", # Leave unreferenced data in
      "/OPT:NOICF", # Don't fold redundant COMDAT data.
      "/DEBUG", # Make a .pdb file
    ]
  } else {
    cflags += [
      "/O2",  # Fully optimize (MSVC)
      "/Zc:inline",  # Remove unreferenced COMDAT (faster links).
      # Put data in separate COMDATs. This allows the linker
      # to put bit-identical constants at the same address even if
      # they're unrelated constants, which saves binary size.
      # This optimization can't be used when ASan is enabled because
      # it is not compatible with the ASan ODR checker.
      "/Gw",
    ]
    if (use_clang) {
      # Fully optimize (LLVM)
      cflags += [ "/clang:-O3", ]
    }
    ldflags += [
      "/OPT:REF", # Remove unreferenced data. 
      "/OPT:ICF", # Fold redundant COMDAT data.
      "/DEBUG:NONE", # No .pdb
    ]
  }

  cflags = [
    "/Gy", # Enable function-level linking.
  ]
  ldflags = [ "/NXCOMPAT", ]
  if (use_clang) {
    cflags += [
      "/clang:-fdiagnostics-format=clang", # Assuming you want clang format.
      "/clang:-fno-math-errno", # So the compiler knows it can inline math functions.
    ]
    if (current_cpu == "x86") {
      if (host_cpu == "x86" || host_cpu == "x64") {
        cflags += [ "-m32" ]
      } else {
        cflags += [ "--target=i386-windows" ]
      }
    } else if (current_cpu == "x64") {
      if (host_cpu == "x86" || host_cpu == "x64") {
        cflags += [ "-m64" ]
      } else {
        cflags += [ "--target=x86_64-windows" ]
      }
    } else if (current_cpu == "arm64") {
      cflags += [ "--target=aarch64-pc-windows" ]
    } else {
      assert(false, "unknown current_cpu " + current_cpu)
    }
  }
  if (current_cpu == "x86") {
    if (use_clang) {
      cflags += [ "-mmmx", "-msse", ]
    }
    cflags += [ "/arch:SSE", ]
    ldflags += [ "/largeaddressaware", ]
  } else if (current_cpu == "x64") {
    if (use_clang) {
      cflags += [ "-mmmx", "-msse", "-msse2", ]
    }
    cflags += [ "/arch:SSE2", ]
  }
  if (use_avx) {
    cflags += [ "/arch:AVX", ]
  }
  if (is_debug) {
    ldflags += [ "/INCREMENTAL", ]
  } else {
    # Disable incremental builds
    ldflags += [ "/INCREMENTAL:NO", ]
    if (use_clang) {
      # Enable string tail merging
      ldflags += [ "/OPT:LLDTAILMERGE", ]
    }
  }

  if (current_cpu == "x86") {
    ldflags += " /MACHINE:X86"
  } else if (current_cpu == "x64") {
    ldflags += " /MACHINE:X64"
  } else if (current_cpu == "arm") {
    ldflags += " /MACHINE:ARM"
  } else if (current_cpu == "arm64") {
    ldflags += " /MACHINE:ARM64"
  }

  if (is_console_app) {
    ldflags += [ "/SUBSYSTEM:CONSOLE,$subsystem_version_suffix" ]
  } else {
    ldflags += [ "/SUBSYSTEM:WINDOWS,$subsystem_version_suffix" ]
  }

  asmflags = cflags
}
