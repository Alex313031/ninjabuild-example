import("//build/build_args.gni")
import("//build/config/compiler.gni")

# Debug/release-related defines.
config("debug") {
  # Full symbols and assertions
  defines = [
    "SYMBOL_LEVEL=2",
  ]
}
config("release") {
  # No symbols or assertions
  defines = [
    "SYMBOL_LEVEL=0",
  ]
}

# Compiler flags ---------------------------------------------------------------
# Set up our baseline compiler flags, and optimization flags
config("compiler") {
  # Compiler flags
  # Use 2017 syntax for //base
  # and because >= GCC 8, >= Clang 5, and
  # >= MSVC 19.15 (MSVS 2017 15.8 update) supports it.
  # Compilation/development can thus be done on Windows 7 SP1+
  cflags = [ "-std=c++17" ]
  # C only flags. Use C 2011 standard
  cflags_c = [ "-std=c11" ]
  # C++ only flags
  cflags_cc = cflags
  # Linker flags
  ldflags = []
  # Assembler flags
  asmflags = []
  # Archiver flags
  arflags = []
  # Configs to import from other BUILD.gns
  configs = []
  # Compiler DEFINEs
  defines = []


  if (dcheck_is_on) {
    defines += [ "DCHECK_IS_ON=1" ]
  }

  if (is_posix) {
    # Use standard C++ stuff
    cflags_c += [ "-lstdc++", ]
  }

  if (is_posix && !is_mac) {
    if (is_linux) {
      cflags += [
        "-fPIC",
        "-pthread",
      ]
      ldflags += [ "-fPIC", ]
    }
    if (current_cpu == "x64") {
      cflags += [ "-m64", ]
      ldflags += [ "-m64" ]
    } else if (current_cpu == "x86") {
      cflags += [ "-m32", ]
      ldflags += [ "-m32", ]
    } else if (current_cpu == "arm") {
      cflags += [ "--target=arm-linux-gnueabihf", "-mthumb", "-mfloat-abi=$arm_float_abi", "-mfpu=$arm_fpu" ]
      ldflags += [ "--target=arm-linux-gnueabihf", "-march=$march", ]
    } else if (current_cpu == "arm64") {
      cflags += [ "--target=aarch64-linux-gnu", "-mfpu=neon", "-march=$march",  ]
      ldflags += [ "--target=aarch64-linux-gnu", "-mfpu=neon", "-march=$march", ]
    } else if (current_cpu == "riscv64") {
      cflags += [ "--target=riscv64-linux-gnu", ]
      ldflags += [ "--target=riscv64-linux-gnu", ]
    } else if (current_cpu == "ppc64") {
      cflags += [ "--target=ppc64-linux-gnu", "-m64", ]
      ldflags += [ "--target=ppc64-linux-gnu", "-m64", ]
    } else {
      print("Unsupported target_cpu")
    }
    if (is_debug) {
      cflags += [
        "-g2", # Include full debugging symbols
        "-Og", # Optimize lightly, excluding debug stuff
        "-w", # Warnings
        "-Wall", # Show all waarnings
      ]
      if (dcheck_is_on) {
        cflags += [
          "-Werror", # Warnings are errors
          "-Wextra", # Show pedantic warnings
        ]
      }
      ldflags += [
        "-Wl,-O0", # Don't optimize
        "-Werror", # May be set to -Wno-error if it causes problems
      ]
    } else {
      cflags += [
        "-g0", # Disable debugging symbols
        "-O3", # Enable full optimization
        "-Wno-error", # Warnings aren't errors
      ]
      if (use_gcc) {
        cflags += [ "-s", ] # Enable stripping
      }
      ldflags += [
        "-Wl,-O3", # Enables string tail merge optimization
        "-Wl,--gc-sections",
        "-Wno-error",
      ]
    }
    asmflags = cflags
    if (is_linux) {
      configs += [ ":linux" ]
    }
  }

  if (is_win) {
    configs += [ ":windows" ]
  }

  if (is_mac) {
    if (is_debug) {
      cflags += [
        "-g",
      ]
    } else {
      cflags += [
        "-fPIC",
      ]
    }
    asmflags = cflags
  }
}

# POSIX/Linux specific compiler stuff
config("linux") {
  if (is_posix) {
    cflags = [
      # "-fno-exceptions", # Exclude standard C++ exception handling such as try, catch, or throw
      # Put data and code in their own sections, so that unused symbols
      # can be removed at link time with --gc-sections.
      "-fdata-sections",
      "-ffunction-sections",
      "-fno-math-errno" # So the compiler knows it can inline math functions.
    ]
    if (current_cpu == "x86") {
      cflags += [ "-mfpmath=sse", "-mmx", "-msse", ]
    } else if (current_cpu == "x64") {
      cflags += [ "-msse2", ]
    }
    if (use_avx) {
      cflags += [ "-mavx", ]
    }
    asmflags = cflags
  }
}

# Windows specific compiler stuff
config("windows") {
  if (is_win) {
    configs = []
    # Defines that set up the CRT.
    defines = [
      "__STD_C", # Yup standard C++
      "_CRT_RAND_S", # Allow rand_s() function
      "_CRT_SECURE_NO_DEPRECATE",
      "_CRT_SECURE_NO_WARNINGS", # Disable deprecation warnings
      "_SCL_SECURE_NO_DEPRECATE",
    ]

    # Defines that set up the Windows SDK.
    defines += [
      "WIN32", # Yup this is Win32 alright
      "_WIN32",
    ]
    if (current_cpu == "x64") {
      defines += [
        "WIN64",
        "_WIN64",
      ]
    }
    if (is_console_app) {
      defines += [
        "_CONSOLE",
      ]
      configs += [ ":lean_and_mean" ]
    } else {
      defines += [
        "_WINDOWS",
      ]
      configs += [ ":nominmax" ]
    }

    # Other compiler optimization and debug flags
    configs += [ "//build/config/win/:win32", ]
  }
}

# Some third party code might not compile with WIN32_LEAN_AND_MEAN so we have
# to have a separate config for it. Remove this config from your target to
# get the "bloaty and accommodating" version of windows.h.
config("lean_and_mean") {
  defines = [ "WIN32_LEAN_AND_MEAN" ]
}

config("nominmax") {
  defines = [ "NOMINMAX" ]
}


# For kill code in logger.h
config("no_div_by_zero") {
  cflags = [ "-Wno-div-by-zero" ]
  if (use_clang) {
    ldflags = [ "-Wl,-Wno-div-by-zero" ]
  }
}

# Default libraries ------------------------------------------------------------
# This config defines the default libraries applied to all targets.
config("default_libs") {
  if (is_win) {
    # Basic win32 libs for generic development and NT 5.x support.
    libs = [
      "comdlg32.lib",
      "ntdll.lib",
      "psapi.lib",
    ]
    if (current_os == "winuwp") {
      # These libraries are needed for Windows UWP (i.e. store apps).
      libs += [ "dloadhelper.lib", "WindowsApp.lib", ]
    } else {
      # These libraries are not compatible with Windows UWP.
      libs += [ "kernel32.lib", "ole32.lib", ]
    }
  } else if (is_mac) {
    # Targets define their own
    libs = []
  } else if (is_linux) {
    libs = [
      "dl",
      "pthread",
      "rt",
    ]
  } else {
    # NOTREACHED This should never be reached
    print("NOTREACHED: No default libs applied during compilation!")
  }
}
